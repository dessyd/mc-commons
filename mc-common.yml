services:
  mc:
    image: itzg/minecraft-server
    hostname: ${RCON_HOST:-mc}
    ports:
      # expose the Minecraft server port outside of container
      - ${PORT:-25565}:25565
    networks:
      minecraft-net:
      minio-net:
    dns:
      - 1.1.1.1
    depends_on:
      restore-backup:
        condition: service_completed_successfully
    environment:
      ENFORCE_WHITELIST: "true"
      EULA: "true"
      OVERRIDE_SERVER_PROPERTIES: "true"
      LEVEL: ${WORLD_NAME:-world}
      TZ: "Europe/Brussels"
      RCON_PASSWORD: ${RCON_PASSWORD}
    restart: unless-stopped
    volumes:
      # use a named, managed volume for data volume
      - data:/data

  # "init" container for mc to restore the data volume when empty    
  restore-backup:
    # Same image as mc, but any base image with bash and tar will work
    image: itzg/mc-backup
    restart: "no"
    entrypoint: restore-tar-backup
    environment:
      UID: 1027
      GID: 100
    volumes:
      # Must be same mount as mc service, needs to be writable
      - data:/data

  mc-backup:
    image: itzg/mc-backup
    networks:
      minecraft-net:
    depends_on:
      mc:
        condition: service_healthy
    environment:
      UID: 1027
      GID: 100
      BACKUP_NAME: ${WORLD_NAME:-world}
      INITIAL_DELAY: ${INITIAL_DELAY:-5m}
      BACKUP_INTERVAL: ${BACKUP_INTERVAL:-12h}
      PAUSE_IF_NO_PLAYERS: true
      PRUNE_BACKUPS_DAYS: ${PRUNE_BACKUPS_DAYS:-7}
      LINK_LATEST: "true"
      EXCLUDES: "*.jar,*.log,cache,logs"
      RCON_HOST: mc
      PRE_BACKUP_SCRIPT: |
        echo "Before backup!"
        echo "Also before backup from $$RCON_HOST to $$DEST_DIR"
      POST_BACKUP_SCRIPT_FILE: /post-backup.sh
      TZ: Europe/Brussels
    volumes:
      # mount the same volume used by server, but read-only
      - data:/data:ro
      - ./scripts/post-backup.sh:/post-backup.sh:ro
      

